// Front-end code using Vue.js
<template>
  <div id="app">
    <h1>Danh sách film</h1>
    <table>
      <thead>
        <tr>
          <th>Id</th>
          <th>Tên film</th>
          <th>Hình ảnh</th>
          <th>Tác giả</th>
          <th>Chi tiết film</th>
          <th>Khởi chiếu</th>
          <th>Thời lượng</th>
          <th>Độ tuổi yêu cầu</th>
          <th>Hành động</th>
        </tr>
      </thead>
      <tbody>
        <tr v-for="film in films" :key="film.id">
          <td>{{ film.id }}</td>
          <td>{{ film.name }}</td>
          <td><img :src="film.image" alt="Hình ảnh film" width="100" height="100"></td>
          <td>{{ film.author }}</td>
          <td>{{ film.details }}</td>
          <td>{{ film.release_date }}</td>
          <td>{{ film.duration }}</td>
          <td>{{ film.age_requirement }}</td>
          <td><button @click="editFilm(film)">Sửa</button><button @click="deleteFilm(film.id)">Xóa</button></td>
        </tr>
      </tbody>
    </table>

    <div v-if="showForm">
      <h2>{{ formTitle }}</h2>
      <form @submit.prevent="submitForm">
        <div><label for="name">Tên film:</label><input type="text" id="name" v-model="film.name" required></div>
        <div><label for="image">Hình ảnh:</label><input type="file" id="image" @change="onFileChange" accept="image/*"></div>
        <div><label for="author">Tác giả:</label><input type="text" id="author" v-model="film.author"></div>
        <div><label for="details">Chi tiết film:</label><textarea id="details" v-model="film.details"></textarea></div>
        <div><label for="release_date">Khởi chiếu:</label><input type="date" id="release_date" v-model="film.release_date"></div>
        <div><label for="duration">Thời lượng:</label><input type="number" id="duration" v-model.number="film.duration"></div>
        <div><label for="age_requirement">Độ tuổi yêu cầu:</label><input type="number" id="age_requirement" v-model.number="film.age_requirement"></div>
        <div><button type="submit">{{ formButton }}</button><button @click="cancelForm">Hủy bỏ</button></div>
      </form>
    </div>

    <button @click="addFilm">Thêm film mới</button>

  </div>
</template>

<script>

import axios from 'axios';

export default {
  name: 'App',
  data() {
    return {
      films: [],
      film: {},
      showForm: false,
      formTitle: '',
      formButton: ''
    }
  },
  methods: {
    getFilms() {
      axios.get('http://localhost:3000/api/films')
        .then(response => {
          this.films = response.data;
        })
        .catch(error => {
          console.log(error);
        });
    },
    addFilm() {
      this.film = {};
      this.showForm = true;
      this.formTitle = 'Thêm film mới';
      this.formButton = 'Thêm';
    },
    editFilm(film) {
      this.film = Object.assign({}, film);
      this.showForm = true;
      this.formTitle = 'Sửa thông tin film';
      this.formButton = 'Sửa';
    },
    deleteFilm(id) {
      if (confirm('Bạn có chắc chắn muốn xóa film này không?')) {
        axios.delete(`http://localhost:3000/api/films/${id}`)
          .then(response => {
            this.getFilms();
          })
          .catch(error => {
            console.log(error);
          });
      }
    },
    submitForm() {
      if (this.film.id) {
        // Update existing film
        axios.put(`http://localhost:3000/api/films/${this.film.id}`, this.film)
          .then(response => {
            this.getFilms();
            this.cancelForm();
          })
          .catch(error => {
            console.log(error);
          });
      } else {
        // Create new film
        axios.post('http://localhost:3000/api/films', this.film)
          .then(response => {
            this.getFilms();
            this.cancelForm();
          })
          .catch(error => {
            console.log(error);
          });
      }
    },
    cancelForm() {
      this.showForm = false;
    },
    onFileChange(e) {
      const file = e.target.files[0];
      const reader = new FileReader();
      reader.onload = (e) => {
        this.film.image = e.target.result;
      };
      reader.readAsDataURL(file);
    }
  },
  mounted() {
    this.getFilms();
  }
}
</script>

// Back-end code using Node.js and SQL Server
const express = require('express');
const bodyParser = require('body-parser');
const sql = require('mssql');

const app = express();

app.use(bodyParser.json());

// Database configuration
const config = {
  user: 'sa',
  password: '123456',
  server: 'localhost',
  database: 'filmdb'
};

// API endpoints
app.get('/api/films', (req, res) => {
  // Get all films from database
  sql.connect(config, (err) => {
    if (err) {
      console.log(err);
      res.status(500).send(err.message);
    } else {
      const request = new sql.Request();
      request.query('select * from films', (err, result) => {
        if (err) {
          console.log(err);
          res.status(500).send(err.message);
        } else {
          res.status(200).send(result.recordset);
        }
      });
    }
  });
});

app.post('/api/films', (req, res) => {
  // Create a new film in database
  const film = req.body;
  sql.connect(config, (err) => {
    if (err) {
      console.log(err);
      res.status(500).send(err.message);
    } else {
      const request = new sql.Request();
      request.input('name', sql.NVarChar, film.name);
      request.input('image', sql.NVarChar, film.image);
      request.input('author', sql.NVarChar, film.author);
      request.input('details', sql.NVarChar, film.details);
      request.input('release_date', sql.Date, film.release_date);
      request.input('duration', sql.Int, film.duration);
      request.input('age_requirement', sql.Int, film.age_requirement);
      request.query('insert into films (name, image, author, details, release_date, duration, age_requirement) values (@name, @image, @author, @details, @release_date, @duration, @age_requirement)', (err, result) => {
        if (err) {
          console.log(err);
          res.status(500).send(err.message);
        } else {
          res.status(201).send('Film created successfully');
        }
      });
    }
  });
});

app.put('/api/films/:id', (req, res) => {
  // Update an existing film in database
  const id = req.params.id;
  const film = req.body;
  sql.connect(config, (err) => {
    if (err) {
      console.log(err);
      res.status(500).send(err.message);
    } else {
      const request = new sql.Request();
      request.input('id', sql.Int, id);
      request.input('name', sql.NVarChar, film.name);
      request.input('image', sql.NVarChar, film.image);
      request.input('author', sql.NVarChar, film.author);
      request.input('details', sql.NVarChar, film.details);
      request.input('release_date', sql.Date, film.release_date);
      request.input('duration', sql.Int, film.duration);
      request.input('age_requirement', sql.Int, film.age_requirement);
      request.query('update films set name = @name, image = @image, author = @author, details = @details, release_date = @release_date, duration = @duration, age_requirement = @age_requirement where id = @id', (err, result) => {
        if (err) {
          console.log(err);
          res.status(500).send(err.message);
        } else {
          res.status
