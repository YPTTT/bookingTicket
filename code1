// Vuejs component for displaying and editing the film list
<template>
  <div id="app">
    <h1>Film List</h1>
    <table>
      <thead>
        <tr>
          <th>Title</th>
          <th>Genre</th>
          <th>Year</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody>
        <tr v-for="film in films" :key="film.id">
          <td>{{ film.title }}</td>
          <td>{{ film.genre }}</td>
          <td>{{ film.year }}</td>
          <td>
            <button @click="editFilm(film)">Edit</button>
            <button @click="deleteFilm(film.id)">Delete</button>
          </td>
        </tr>
      </tbody>
    </table>
    <div v-if="showForm">
      <h2>{{ formTitle }}</h2>
      <form @submit.prevent="submitForm">
        <label for="title">Title:</label>
        <input id="title" v-model="form.title" required />
        <label for="genre">Genre:</label>
        <input id="genre" v-model="form.genre" required />
        <label for="year">Year:</label>
        <input id="year" v-model.number="form.year" required />
        <button type="submit">Save</button>
        <button @click="cancelForm">Cancel</button>
      </form>
    </div>
    <button v-else @click="addFilm">Add Film</button>
  </div>
</template>

<script>
import axios from "axios";

export default {
  name: "App",
  data() {
    return {
      films: [],
      showForm: false,
      formTitle: "",
      form: {
        id: null,
        title: "",
        genre: "",
        year: null,
      },
    };
  },
  mounted() {
    this.getFilms();
  },
  methods: {
    async getFilms() {
      try {
        let response = await axios.get("/api/films");
        this.films = response.data;
      } catch (error) {
        console.error(error);
      }
    },
    addFilm() {
      this.showForm = true;
      this.formTitle = "Add Film";
      this.form.id = null;
      this.form.title = "";
      this.form.genre = "";
      this.form.year = null;
    },
    editFilm(film) {
      this.showForm = true;
      this.formTitle = "Edit Film";
      this.form.id = film.id;
      this.form.title = film.title;
      this.form.genre = film.genre;
      this.form.year = film.year;
    },
    async submitForm() {
      try {
        if (this.form.id) {
          // update existing film
          await axios.put("/api/films/" + this.form.id, this.form);
        } else {
          // create new film
          await axios.post("/api/films", this.form);
        }
        this.showForm = false;
        this.getFilms();
      } catch (error) {
        console.error(error);
      }
    },
    cancelForm() {
      this.showForm = false;
    },
    async deleteFilm(id) {
      try {
        await axios.delete("/api/films/" + id);
        this.getFilms();
      } catch (error) {
        console.error(error);
      }
    },
  },
};
</script>

// Nodejs server for handling api requests and connecting to sql server
const express = require("express");
const cors = require("cors");
const mssql = require("mssql");

const app = express();
app.use(cors());
app.use(express.json());

// configure sql server connection
const config = {
  user: "sa",
  password: "password",
  server: "localhost",
  database: "filmdb",
};

// create a pool of connections
const pool = new mssql.ConnectionPool(config);

// connect to the database
pool.connect((err) => {
  if (err) {
    console.error(err);
  } else {
    console.log("Connected to sql server");
  }
});

// get all films
app.get("/api/films", async (req, res) => {
  try {
    let result = await pool.request().query("SELECT * FROM films");
    res.json(result.recordset);
  } catch (error) {
    res.status(500).json(error);
  }
});

// get a film by id
app.get("/api/films/:id", async (req, res) => {
  try {
    let id = req.params.id;
    let result = await pool
      .request()
      .input("id", mssql.Int, id)
      .query("SELECT * FROM films WHERE id = @id");
    res.json(result.recordset[0]);
  } catch (error) {
    res.status(500).json(error);
  }
});

// create a film
app.post("/api/films", async (req, res) => {
  try {
    let film = req.body;
    let result = await pool
      .request()
      .input("title", mssql.NVarChar, film.title)
      .input("genre", mssql.NVarChar, film.genre)
      .input("year", mssql.Int, film.year)
      .query(
        "INSERT INTO films (title, genre, year) OUTPUT inserted.id VALUES (@title, @genre, @year)"
      );
    res.json(result.recordset[0]);
  } catch (error) {
    res.status(500).json(error);
  }
});

// update a film by id
app.put("/api/films/:id", async (req, res) => {
  try {
    let id = req.params.id;
    let film = req.body;
    let result = await pool
      .request()
      .input("id", mssql.Int, id)
      .input("title", mssql.NVarChar, film.title)
      .input("genre", mssql.NVarChar, film.genre)
      .input("year", mssql.Int, film.year)
      .query(
        "UPDATE films SET title = @title, genre = @genre, year = @year WHERE id = @id"
      );
    res.json(result.rowsAffected[0]);
  } catch (error) {
    res.status(500).json(error);
  }
});

// delete a film by id
app.delete("/api/films/:id", async (req, res) => {
  try {
    let id = req.params.id;
    let result = await pool
      .request()
      .input("id", mssql.Int, id)
      .query("DELETE FROM films WHERE id = @id");
    res.json(result.rowsAffected[0]);
  } catch (error) {
    res.status(500).json(error);
  }
});

// start the server
const port = process.env.PORT || 3000;
app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});

